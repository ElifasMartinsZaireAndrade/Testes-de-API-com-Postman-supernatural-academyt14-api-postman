{
	"info": {
		"_postman_id": "1f7d7319-b085-4f16-ac24-de09d1818d1f",
		"name": "Qa-Coders Academy",
		"description": "Feito por João, Bruna e Elifas. No momento, não havia cards separados para cada membro do grupo Supernatural, então foi feita essa divisão para que todos pudessem participar da sprint.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29394590"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  pm.globals.set(\"tokenAdmin\", pm.response.json().token)\r",
									"\r",
									"pm.test(\"Status code is 200\", () =>  {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify token is valid\", function() {\r",
									"    pm.expect(pm.response.json().token).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Welcome Message\", () => {\r",
									"    pm.environment.set(\"msgAdmin\", pm.response.json().msg);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{mailAdmin}}\",\r\n    \"password\": \"{{passAdmin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}login",
							"host": [
								"{{url}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar Token",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}validateToken",
							"host": [
								"{{url}}validateToken"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Criação de usuário",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = [\r",
									"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
									"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
									"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
									"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
									"    ];\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
									"    return randomName;\r",
									"}\r",
									"\r",
									"function lastname() {\r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
									"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
									"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
									"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
									"    ];\r",
									"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"    return randomLastName;\r",
									"}\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									"\r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"\r",
									"    const comprimentoParaPreencher = Math.floor(Math.random() * (comprimentoMaximo - comprimentoMinimo + 1)) + (comprimentoMinimo - senhaArray.length);\r",
									"\r",
									"    for (let i = 0; i < comprimentoParaPreencher; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"\r",
									"    function shuffleString(string) {\r",
									"        return string.split('').sort(() => Math.random() - 0.5).join('');\r",
									"    }\r",
									"\r",
									"    return shuffleString(senhaArray.join(''));\r",
									"}\r",
									"\r",
									"function randomCpf() {\r",
									"    let cpf = '';\r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        cpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return cpf;\r",
									"}\r",
									"\r",
									"\r",
									"const userFirstName = firstname();\r",
									"pm.environment.set(\"FirstName\", userFirstName);\r",
									"console.log(\"FirstName:\", userFirstName);\r",
									"\r",
									"const userLastName = lastname();\r",
									"pm.environment.set(\"LastName\", userLastName);\r",
									"console.log(\"LastName:\", userLastName);\r",
									"\r",
									"const userFullName = userFirstName + \" \" + userLastName; \r",
									"pm.environment.set(\"FullName\", userFullName);\r",
									"console.log(\"FullName:\", userFullName);\r",
									"\r",
									"const userPassword = generatePassword(); \r",
									"pm.environment.set(\"passUser\", userPassword);\r",
									"console.log(\"Password:\", userPassword);\r",
									"\r",
									"const userEmail = pm.environment.get(\"FullName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@supernatural.com.br';\r",
									"pm.environment.set(\"Mail\", userEmail);\r",
									"console.log(\"Email:\", userEmail);\r",
									"\r",
									"const userCpf = randomCpf(); \r",
									"pm.environment.set(\"CPF\", userCpf);\r",
									"console.log(\"CPF:\", userCpf);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ID User\", () => {\r",
									"    pm.environment.set(\"IdUser\", pm.response.json().user._id);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"password\": \"{{passUser}}\",\r\n  \"confirmPassword\": \"{{passUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user",
							"host": [
								"{{url}}user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login de usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () =>  {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Welcome Message\", () => {\r",
									"    pm.environment.set(\"msgAdmin\", pm.response.json().msg);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ID User\", () => {\r",
									"    pm.environment.set(\"IdUser\", pm.response.json().user._id);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{Mail}}\",\r\n    \"password\": \"{{passUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}login",
							"host": [
								"{{url}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletar usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () =>  {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Welcome Message\", () => {\r",
									"    pm.environment.set(\"msgAdmin\", pm.response.json().msg);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ID User\", () => {\r",
									"    pm.environment.set(\"IdUser\", pm.response.json().user._id);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user/68757573755374ae18efea8e",
							"host": [
								"{{url}}user"
							],
							"path": [
								"68757573755374ae18efea8e"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mostrar Usuário com ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () =>  {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user/{{IdUser}}",
							"host": [
								"{{url}}user"
							],
							"path": [
								"{{IdUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mostrar Usuários",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () =>  {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user/",
							"host": [
								"{{url}}user"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Atualizar dados do usuário",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = [\r",
									"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
									"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
									"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
									"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
									"    ];\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
									"    return randomName;\r",
									"}\r",
									"\r",
									"function lastname() {\r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
									"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
									"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
									"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
									"    ];\r",
									"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"    return randomLastName;\r",
									"}\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									"\r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"\r",
									"    const comprimentoParaPreencher = Math.floor(Math.random() * (comprimentoMaximo - comprimentoMinimo + 1)) + (comprimentoMinimo - senhaArray.length);\r",
									"\r",
									"    for (let i = 0; i < comprimentoParaPreencher; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"\r",
									"    function shuffleString(string) {\r",
									"        return string.split('').sort(() => Math.random() - 0.5).join('');\r",
									"    }\r",
									"\r",
									"    return shuffleString(senhaArray.join(''));\r",
									"}\r",
									"\r",
									"function randomCpf() {\r",
									"    let cpf = '';\r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        cpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return cpf;\r",
									"}\r",
									"\r",
									"\r",
									"const userFirstName = firstname();\r",
									"pm.environment.set(\"FirstName\", userFirstName);\r",
									"console.log(\"FirstName:\", userFirstName);\r",
									"\r",
									"const userLastName = lastname();\r",
									"pm.environment.set(\"LastName\", userLastName);\r",
									"console.log(\"LastName:\", userLastName);\r",
									"\r",
									"const userFullName = userFirstName + \" \" + userLastName; \r",
									"pm.environment.set(\"FullName\", userFullName);\r",
									"console.log(\"FullName:\", userFullName);\r",
									"\r",
									"const userPassword = generatePassword(); \r",
									"pm.environment.set(\"passUser\", userPassword);\r",
									"console.log(\"Password:\", userPassword);\r",
									"\r",
									"const userEmail = pm.environment.get(\"FullName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@supernatural.com.br';\r",
									"pm.environment.set(\"Mail\", userEmail);\r",
									"console.log(\"Email:\", userEmail);\r",
									"\r",
									"const userCpf = randomCpf(); \r",
									"pm.environment.set(\"CPF\", userCpf);\r",
									"console.log(\"CPF:\", userCpf);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ID User\", () => {\r",
									"    pm.environment.set(\"IdUser\", pm.response.json().user._id);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user/{{IdUser}}",
							"host": [
								"{{url}}user"
							],
							"path": [
								"{{IdUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Atualizar status do usuário",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = [\r",
									"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
									"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
									"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
									"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
									"    ];\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
									"    return randomName;\r",
									"}\r",
									"\r",
									"function lastname() {\r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
									"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
									"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
									"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
									"    ];\r",
									"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"    return randomLastName;\r",
									"}\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									"\r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"\r",
									"    const comprimentoParaPreencher = Math.floor(Math.random() * (comprimentoMaximo - comprimentoMinimo + 1)) + (comprimentoMinimo - senhaArray.length);\r",
									"\r",
									"    for (let i = 0; i < comprimentoParaPreencher; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"\r",
									"    function shuffleString(string) {\r",
									"        return string.split('').sort(() => Math.random() - 0.5).join('');\r",
									"    }\r",
									"\r",
									"    return shuffleString(senhaArray.join(''));\r",
									"}\r",
									"\r",
									"function randomCpf() {\r",
									"    let cpf = '';\r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        cpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return cpf;\r",
									"}\r",
									"\r",
									"\r",
									"const userFirstName = firstname();\r",
									"pm.environment.set(\"FirstName\", userFirstName);\r",
									"console.log(\"FirstName:\", userFirstName);\r",
									"\r",
									"const userLastName = lastname();\r",
									"pm.environment.set(\"LastName\", userLastName);\r",
									"console.log(\"LastName:\", userLastName);\r",
									"\r",
									"const userFullName = userFirstName + \" \" + userLastName; \r",
									"pm.environment.set(\"FullName\", userFullName);\r",
									"console.log(\"FullName:\", userFullName);\r",
									"\r",
									"const userPassword = generatePassword(); \r",
									"pm.environment.set(\"passUser\", userPassword);\r",
									"console.log(\"Password:\", userPassword);\r",
									"\r",
									"const userEmail = pm.environment.get(\"FullName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@supernatural.com.br';\r",
									"pm.environment.set(\"Mail\", userEmail);\r",
									"console.log(\"Email:\", userEmail);\r",
									"\r",
									"const userCpf = randomCpf(); \r",
									"pm.environment.set(\"CPF\", userCpf);\r",
									"console.log(\"CPF:\", userCpf);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ID Admin\", () => {\r",
									"    pm.environment.set(\"IDAdmin\", pm.response.json().user._id);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user/status/{{IdUser}}",
							"host": [
								"{{url}}user"
							],
							"path": [
								"status",
								"{{IdUser}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Card: 23249 Cadastro login de acesso",
			"item": [
				{
					"name": "Login com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  pm.globals.set(\"tokenAdmin\", pm.response.json().token)\r",
									"\r",
									"pm.test(\"Status code is 200\", () =>  {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify token is valid\", function() {\r",
									"    pm.expect(pm.response.json().token).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Welcome Message\", () => {\r",
									"    pm.environment.set(\"msgAdmin\", pm.response.json().msg);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ID User\", () => {\r",
									"    pm.environment.set(\"IDUser\", pm.response.json().user._id);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{Mail}}\",\r\n    \"password\": \"{{passUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}login",
							"host": [
								"{{url}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login com senha inválida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar mensagem de alerta\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.alert).to.be.a('string').and.to.include(\"E-mail ou senha informados são inválidos.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{Mail}}\",\r\n    \"password\": \"senhaInválida\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}login/",
							"host": [
								"{{url}}login"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login com email inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar mensagem de alerta\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.alert).to.be.a('string').and.to.include(\"E-mail ou senha informados são inválidos.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{emailInválido\",\r\n    \"password\": \"{{passUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}login/",
							"host": [
								"{{url}}login"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login com email em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar mensagem de erro para o campo e-mail\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.mail).to.be.a('string').and.to.include(\"O campo e-mail é obrigatório.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"\",\r\n    \"password\": \"{{passUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}login/",
							"host": [
								"{{url}}login"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login com senha em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar mensagem de erro para o campo senha\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.password).to.be.a('string').and.to.include(\"O campo senha é obrigatório.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{Mail}}\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}login/",
							"host": [
								"{{url}}login"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login com email e senha em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar mensagem de erro para o campo e-mail\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.mail).to.be.a('string').and.to.include(\"O campo e-mail é obrigatório.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar mensagem de erro para o campo senha\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.password).to.be.a('string').and.to.include(\"O campo senha é obrigatório.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}login/",
							"host": [
								"{{url}}login"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Card: 23273 Exclusão de usuário",
			"item": [
				{
					"name": "Exclusão de usuário com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar mensagem\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.msg).to.equal(\"Usuário deletado com sucesso!.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}user/{{IDUser}}",
							"host": [
								"{{url}}user"
							],
							"path": [
								"{{IDUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tentativa de exclusão já excluído",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar mensagem de alerta\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.alert[0]).to.be.a('string').and.to.include(\"Esse usuário não existe em nossa base de dados.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}user/{{IDUser}}",
							"host": [
								"{{url}}user"
							],
							"path": [
								"{{IDUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclusão de usuário com ID inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar mensagem de alerta após deleção\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.alert[0]).to.be.a('string').and.to.include(\"Esse usuário não existe em nossa base de dados.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}user/{{IDInválido}}",
							"host": [
								"{{url}}user"
							],
							"path": [
								"{{IDInválido}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Card: 23303 Cadastrar empresa",
			"item": [
				{
					"name": "Cadastro com sucesso",
					"item": [
						{
							"name": "Cadastro com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 Created\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Mensagem de sucesso de cadastro\", () => {\r",
											"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"cadastrada com sucesso.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Captura e Validação do ID da Empresa\", () => {\r",
											"    var capturedId = pm.environment.get(\"companyId\"); \r",
											"    pm.expect(capturedId).to.not.be.null;\r",
											"    pm.expect(capturedId).to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.environment.set(\"companyId\", pm.response.json().newCompany._id);\r",
											"\r",
											"pm.environment.set(\"corporateNameDuplicado\", pm.response.json().newCompany.corporateName);\r",
											"\r",
											"pm.environment.set(\"cnpjDuplicado\", pm.response.json().newCompany.registerCompany);\r",
											"\r",
											"pm.environment.set(\"matrizDuplicado\", pm.response.json().newCompany.matriz);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET / DELET",
					"item": [
						{
							"name": "Busca a empresa cadastrada pelo ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Salvar ID da Empresa\", () => {\r",
											"    pm.environment.set(\"IDCompany\", pm.response.json()[0]._id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Define os detalhes da request\r",
											"const requestOptions = {\r",
											"    url: `${pm.variables.get(\"url\")}/login`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'accept': 'application/json',\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            mail: \"sysadmin@qacoders.com\",\r",
											"            password: \"1234@Test\"\r",
											"        })\r",
											"    }\r",
											"};\r",
											" \r",
											"// Envia a request\r",
											"pm.sendRequest(requestOptions, function (err, response) {\r",
											"    if (!err) {\r",
											"        pm.environment.set(\"TokenAdmin\", response.json().token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}company/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Busca as empresas cadastradas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Salvar ID da Empresa\", () => {\r",
											"    pm.environment.set(\"IDCompany\", pm.response.json()[0]._id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}company",
									"host": [
										"{{url}}company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleta as empresas cadastradas",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}company/6865c41ae4154de90233389a",
									"host": [
										"{{url}}company"
									],
									"path": [
										"6865c41ae4154de90233389a"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Nome da Empresa",
					"item": [
						{
							"name": "Cadastro com nome da empresa em branco",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'corporateName' é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"Testes\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"99999999999899\",\r\n  \"serviceDescription\": \"Testess\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-6-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-6-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com nome da empresa acima do limite de caracteres 101",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Nome da empresa' deve ter no máximo 100 caracteres.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"Testes\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"99999999999899\",\r\n  \"serviceDescription\": \"Testess\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com nome da empresa duplicado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"\r",
											"    const names = [\r",
											"\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"\r",
											"    ];\r",
											"\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"\r",
											"    return randomName;\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"function lastname() {\r",
											"\r",
											"    const lastNames = [\r",
											"\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"\r",
											"    ];\r",
											"\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"\r",
											"    return randomLastName;\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"const userFirstName = firstname();\r",
											"\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"\r",
											"\r",
											"const userLastName = lastname();\r",
											"\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"\r",
											"const corporateName = `${fullName} company`;\r",
											"\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"\r",
											"const cidadesEstados = {\r",
											"\r",
											"    \"São Paulo\": \"SP\",\r",
											"\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"\r",
											"    \"Salvador\": \"BA\",\r",
											"\r",
											"    \"Curitiba\": \"PR\",\r",
											"\r",
											"    \"Fortaleza\": \"CE\",\r",
											"\r",
											"    \"Recife\": \"PE\",\r",
											"\r",
											"    \"Brasília\": \"DF\",\r",
											"\r",
											"    \"Manaus\": \"AM\",\r",
											"\r",
											"    \"Goiânia\": \"GO\",\r",
											"\r",
											"    \"Florianópolis\": \"SC\",\r",
											"\r",
											"    \"Vitória\": \"ES\",\r",
											"\r",
											"    \"Natal\": \"RN\",\r",
											"\r",
											"    \"João Pessoa\": \"PB\",\r",
											"\r",
											"    \"Campinas\": \"SP\",\r",
											"\r",
											"    \"Uberlândia\": \"MG\",\r",
											"\r",
											"    \"Cuiabá\": \"MT\",\r",
											"\r",
											"    \"Campo Grande\": \"MS\",\r",
											"\r",
											"    \"Belém\": \"PA\",\r",
											"\r",
											"    \"São Luís\": \"MA\",\r",
											"\r",
											"    \"Teresina\": \"PI\",\r",
											"\r",
											"    \"Maceió\": \"AL\",\r",
											"\r",
											"    \"Aracaju\": \"SE\",\r",
											"\r",
											"    \"Palmas\": \"TO\",\r",
											"\r",
											"    \"Boa Vista\": \"RR\",\r",
											"\r",
											"    \"Macapá\": \"AP\",\r",
											"\r",
											"    \"Porto Velho\": \"RO\",\r",
											"\r",
											"    \"Rio Branco\": \"AC\",\r",
											"\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"\r",
											"    \"Niterói\": \"RJ\",\r",
											"\r",
											"    \"Contagem\": \"MG\",\r",
											"\r",
											"    \"Jundiaí\": \"SP\",\r",
											"\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"\r",
											"};\r",
											"\r",
											"\r",
											"\r",
											"function randomCnpj() {\r",
											"\r",
											"    let cnpj = '';\r",
											"\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"\r",
											"    }\r",
											"\r",
											"    return cnpj;\r",
											"\r",
											"}\r",
											"\r",
											"const companyCnpj = randomCnpj();\r",
											"\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().alert).to.be.an('array');\r",
											"    pm.expect(pm.response.json().alert).to.include(\"Essa companhia já está cadastrada. Verifique o nome, CNPJ e a razão social da companhia.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateNameDuplicado}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"Testes\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"99999999999899\",\r\n  \"serviceDescription\": \"Testess\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CNPJ",
					"item": [
						{
							"name": "Cadastro com CNPJ em branco",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include( \"O campo 'CNPJ' da empresa é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"Testes\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"99999999999899\",\r\n  \"serviceDescription\": \"Testess\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com CNPJ contendo letras",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'CNPJ' da empresa deve conter apenas números.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"102314567894aa\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"Testes\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"99999999999899\",\r\n  \"serviceDescription\": \"Testess\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com CNPJ com menos de 14 caracteres numéricos",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'CNPJ' da empresa deve ter no máximo 14 caracteres numéricos.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"0000000000013\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"Testes\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"99999999999899\",\r\n  \"serviceDescription\": \"Testess\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com CNPJ duplicado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().alert).to.be.an('array');\r",
											"    pm.expect(pm.response.json().alert).to.include(\"Essa companhia já está cadastrada. Verifique o nome, CNPJ e a razão social da companhia.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpjDuplicado}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"Testes\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"99999999999899\",\r\n  \"serviceDescription\": \"Testess\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Razão Social (Matriz)",
					"item": [
						{
							"name": "Cadastro com razão social (matriz) em branco",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'matriz' é obrigatório.\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"99999999999899\",\r\n  \"serviceDescription\": \"Testess\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com razão social (matriz) acima do limite de 100 caracteres",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400)\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Razão Social' da empresa deve ter no máximo 100 caracteres.\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa101\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"99999999999899\",\r\n  \"serviceDescription\": \"Testess\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com razão social (matriz) duplicada",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().alert).to.be.an('array');\r",
											"    pm.expect(pm.response.json().alert).to.include(\"Essa companhia já está cadastrada. Verifique o nome, CNPJ e a razão social da companhia.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{matrizDuplicado}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"99999999999899\",\r\n  \"serviceDescription\": \"Testess\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Contato Responsável",
					"item": [
						{
							"name": "Cadastro com contato responsável em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Contado do Responsável' é obrigatório.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"\",\r\n  \"telephone\": \"99999999999899\",\r\n  \"serviceDescription\": \"Testess\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com contato responsável contendo números",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Contato do Responsável' deve ter nome e sobrenome, contendo somente letras.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"Lucas Carvalho 1022\",\r\n  \"telephone\": \"99999999999899\",\r\n  \"serviceDescription\": \"Testess\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com contato responsável abaixo de duas palavras",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Contato do Responsável' deve ter nome e sobrenome, contendo somente letras.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"Lucas\",\r\n  \"telephone\": \"99999999999899\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com contato responsável acima do limite de 100 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Contado do Responsável' deve ter no máximo 100 caracteres.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n  \"telephone\": \"99999999999899\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Telefone",
					"item": [
						{
							"name": "Cadastro com telefone em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Telefone' é obrigatório.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com telefone contendo letras",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Telefone' deve conter somente números.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"55619842767AA\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com telefone acima do limite de 14 caracteres",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Telefone' deve ter entre 13 e 14 caracteres.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"000000000000015\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com telefone abaixo do limite de 13 caracteres",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Telefone' deve ter entre 13 e 14 caracteres.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"000000000012\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "E-mail",
					"item": [
						{
							"name": "Cadastro com e-mail em branco",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Email' é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com e-mail em formato inválido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com e-mail já existente",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Descrição",
					"item": [
						{
							"name": "Cadastro com descrição em branco",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com descrição com caracteres não-alfanuméricos",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Logradouro (Endereço)",
					"item": [
						{
							"name": "Cadastro com logradouro em branco",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com logradouro acima do limite de 51 caracteres",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Número (Endereço)",
					"item": [
						{
							"name": "Cadastro com número em branco",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com número com caracteres não-numéricos",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com número acima do limite de 10 caracteres",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Complemento (Endereço)",
					"item": [
						{
							"name": "Cadastro com complemento acima de 81 caracteres",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Bairro (Endereço)",
					"item": [
						{
							"name": "Cadastro com bairro em branco",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com bairro acima de 51 caracteres",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cidade (Endereço)",
					"item": [
						{
							"name": "Cadastro com cidade em branco",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com cidade contendo números",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com cidade acima de 51 caracteres",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Estado (Endereço)",
					"item": [
						{
							"name": "Cadastro com estado em branco",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com estado contendo números",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com estado acima de 2 caracteres",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "País (Endereço)",
					"item": [
						{
							"name": "Cadastro com País em branco",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com País contendo números",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com País acima de 51 caracteres",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CEP (Endereço)",
					"item": [
						{
							"name": "Cadastro com CEP em branco",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com CEP contendo letras",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com CEP inválido",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Card: 23307 Editar cadastro de empresa",
			"item": [
				{
					"name": "Cadastro/PUT com sucesso",
					"item": [
						{
							"name": "Cadastro com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 Created\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Mensagem de sucesso de cadastro\", () => {\r",
											"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"cadastrada com sucesso.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Captura e Validação do ID da Empresa\", () => {\r",
											"    var capturedId = pm.environment.get(\"companyId\"); \r",
											"    pm.expect(capturedId).to.not.be.null;\r",
											"    pm.expect(capturedId).to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.environment.set(\"companyId\", pm.response.json().newCompany._id);\r",
											"\r",
											"pm.environment.set(\"corporateNameDuplicado\", pm.response.json().newCompany.corporateName);\r",
											"\r",
											"pm.environment.set(\"cnpjDuplicado\", pm.response.json().newCompany.registerCompany);\r",
											"\r",
											"pm.environment.set(\"matrizDuplicado\", pm.response.json().newCompany.matriz);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Mensagem de sucesso de atualização\", () => {\r",
											"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"Companhia atualizada com sucesso.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984384789\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar Status da Empresa",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Mensagem de sucesso de atualização\", () => {\r",
											"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"Companhia atualizada com sucesso.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\":  \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-6-supernatural.qacoders.dev.br/api/company/status/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-6-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"status",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						}
					]
				},
				{
					"name": "Nome da Empresa",
					"item": [
						{
							"name": "Editar com nome da empresa em branco",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'corporateName' é obrigatório.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984384789\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar com nome da empresa acima do limite de 100 caracteres",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Nome da empresa' deve ter no máximo 100 caracteres.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa101\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984384789\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar com nome da empresa duplicado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"\r",
											"    const names = [\r",
											"\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"\r",
											"    ];\r",
											"\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"\r",
											"    return randomName;\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"function lastname() {\r",
											"\r",
											"    const lastNames = [\r",
											"\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"\r",
											"    ];\r",
											"\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"\r",
											"    return randomLastName;\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"const userFirstName = firstname();\r",
											"\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"\r",
											"\r",
											"const userLastName = lastname();\r",
											"\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"\r",
											"const corporateName = `${fullName} company`;\r",
											"\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"\r",
											"const cidadesEstados = {\r",
											"\r",
											"    \"São Paulo\": \"SP\",\r",
											"\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"\r",
											"    \"Salvador\": \"BA\",\r",
											"\r",
											"    \"Curitiba\": \"PR\",\r",
											"\r",
											"    \"Fortaleza\": \"CE\",\r",
											"\r",
											"    \"Recife\": \"PE\",\r",
											"\r",
											"    \"Brasília\": \"DF\",\r",
											"\r",
											"    \"Manaus\": \"AM\",\r",
											"\r",
											"    \"Goiânia\": \"GO\",\r",
											"\r",
											"    \"Florianópolis\": \"SC\",\r",
											"\r",
											"    \"Vitória\": \"ES\",\r",
											"\r",
											"    \"Natal\": \"RN\",\r",
											"\r",
											"    \"João Pessoa\": \"PB\",\r",
											"\r",
											"    \"Campinas\": \"SP\",\r",
											"\r",
											"    \"Uberlândia\": \"MG\",\r",
											"\r",
											"    \"Cuiabá\": \"MT\",\r",
											"\r",
											"    \"Campo Grande\": \"MS\",\r",
											"\r",
											"    \"Belém\": \"PA\",\r",
											"\r",
											"    \"São Luís\": \"MA\",\r",
											"\r",
											"    \"Teresina\": \"PI\",\r",
											"\r",
											"    \"Maceió\": \"AL\",\r",
											"\r",
											"    \"Aracaju\": \"SE\",\r",
											"\r",
											"    \"Palmas\": \"TO\",\r",
											"\r",
											"    \"Boa Vista\": \"RR\",\r",
											"\r",
											"    \"Macapá\": \"AP\",\r",
											"\r",
											"    \"Porto Velho\": \"RO\",\r",
											"\r",
											"    \"Rio Branco\": \"AC\",\r",
											"\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"\r",
											"    \"Niterói\": \"RJ\",\r",
											"\r",
											"    \"Contagem\": \"MG\",\r",
											"\r",
											"    \"Jundiaí\": \"SP\",\r",
											"\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"\r",
											"};\r",
											"\r",
											"\r",
											"\r",
											"function randomCnpj() {\r",
											"\r",
											"    let cnpj = '';\r",
											"\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"\r",
											"    }\r",
											"\r",
											"    return cnpj;\r",
											"\r",
											"}\r",
											"\r",
											"const companyCnpj = randomCnpj();\r",
											"\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().alert).to.be.an('array');\r",
											"    pm.expect(pm.response.json().alert).to.include(\"Essa companhia já está cadastrada. Verifique o nome, CNPJ e a razão social da companhia.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateNameDuplicado}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984384789\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CNPJ",
					"item": [
						{
							"name": "Editar com CNPJ em branco",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include( \"O campo 'CNPJ' da empresa é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984384789\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar com CNPJ contendo letras",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'CNPJ' da empresa deve conter apenas números.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"000000000000AA\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984384789\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar com CNPJ com menos de 14 caracteres numéricos",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'CNPJ' da empresa deve ter no máximo 14 caracteres numéricos.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"0000000000013\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984384789\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar com CNPJ duplicado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().alert).to.be.an('array');\r",
											"    pm.expect(pm.response.json().alert).to.include(\"Essa companhia já está cadastrada. Verifique o nome, CNPJ e a razão social da companhia.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpjDuplicado}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984384789\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Razão Social (Matriz)",
					"item": [
						{
							"name": "Editar com razão social (matriz) em branco",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'matriz' é obrigatório.\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984384789\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar com razão social (matriz) acima do limite de 100 caracteres",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400)\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Razão Social' da empresa deve ter no máximo 100 caracteres.\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa101\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984384789\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}company/{{companyId}}",
									"host": [
										"{{url}}company"
									],
									"path": [
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar com razão social (matriz) duplicada",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().alert).to.be.an('array');\r",
											"    pm.expect(pm.response.json().alert).to.include(\"Essa companhia já está cadastrada. Verifique o nome, CNPJ e a razão social da companhia.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{matrizDuplicado}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984384789\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-3-supernatural.qacoders.dev.br/api/company/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-3-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Contato Responsável Copy",
					"item": [
						{
							"name": "Cadastro com contato responsável em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Contado do Responsável' é obrigatório.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"\",\r\n  \"telephone\": \"5561984384789\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com contato responsável contendo números",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Contato do Responsável' deve ter nome e sobrenome, contendo somente letras.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n  \"telephone\": \"5561984384789\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com contato responsável abaixo de duas palavras",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Contato do Responsável' deve ter nome e sobrenome, contendo somente letras.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"Rafael\",\r\n  \"telephone\": \"5561984384789\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro com contato responsável acima do limite de 100 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro de validação\", () => {\r",
											"       pm.expect(pm.response.json().error).to.be.an('array');\r",
											"    pm.expect(pm.response.json().error).to.include(\"O campo 'Contado do Responsável' deve ter no máximo 100 caracteres.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984384789\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Card: 23308 Editar dados de endereço da empresa",
			"item": [
				{
					"name": "Auth Copy",
					"item": [
						{
							"name": "Login Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"  pm.globals.set(\"tokenAdmin\", pm.response.json().token)\r",
											"\r",
											"pm.test(\"Status code is 200\", () =>  {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify token is valid\", function() {\r",
											"    pm.expect(pm.response.json().token).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Welcome Message\", () => {\r",
											"    pm.environment.set(\"msgAdmin\", pm.response.json().msg);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"{{mailAdmin}}\",\r\n    \"password\": \"{{passAdmin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}login",
									"host": [
										"{{url}}login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Token",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}validateToken",
									"host": [
										"{{url}}validateToken"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cadastro/PUT com sucesso",
					"item": [
						{
							"name": "Cadastro com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 Created\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Mensagem de sucesso de cadastro\", () => {\r",
											"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"cadastrada com sucesso.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Captura e Validação do ID da Empresa\", () => {\r",
											"    var capturedId = pm.environment.get(\"companyId\"); \r",
											"    pm.expect(capturedId).to.not.be.null;\r",
											"    pm.expect(capturedId).to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.environment.set(\"companyId\", pm.response.json().newCompany._id);\r",
											"\r",
											"pm.environment.set(\"corporateNameDuplicado\", pm.response.json().newCompany.corporateName);\r",
											"\r",
											"pm.environment.set(\"cnpjDuplicado\", pm.response.json().newCompany.registerCompany);\r",
											"\r",
											"pm.environment.set(\"matrizDuplicado\", pm.response.json().newCompany.matriz);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984276767\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777002\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567881\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {\r",
											"    const names = [\r",
											"        \"Ana\", \"João\", \"Maria\", \"Pedro\", \"Sofia\",\r",
											"        \"Lucas\", \"Isabela\", \"Gabriel\", \"Laura\", \"Mateus\",\r",
											"        \"Manuela\", \"Rafael\", \"Alice\", \"Bruno\", \"Beatriz\",\r",
											"        \"Daniel\", \"Larissa\", \"Thiago\", \"Camila\", \"Felipe\"\r",
											"    ];\r",
											"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"    return randomName;\r",
											"}\r",
											"\r",
											"function lastname() {\r",
											"    const lastNames = [\r",
											"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Lima\",\r",
											"        \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", \"Nascimento\",\r",
											"        \"Carvalho\", \"Martins\", \"Gomes\", \"Fernandes\", \"Lopes\",\r",
											"        \"Monteiro\", \"Barbosa\", \"Reis\", \"Freitas\", \"Dias\"\r",
											"    ];\r",
											"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"    return randomLastName;\r",
											"}\r",
											"\r",
											"const userFirstName = firstname();\r",
											"pm.environment.set(\"FirstName\", userFirstName);\r",
											"console.log(\"FirstName:\", userFirstName);\r",
											"\r",
											"const userLastName = lastname();\r",
											"pm.environment.set(\"LastName\", userLastName);\r",
											"console.log(\"LastName:\", userLastName);\r",
											"\r",
											"const userFullName = userFirstName + \" \" + userLastName;\r",
											"pm.environment.set(\"FullName\", userFullName);\r",
											"console.log(\"FullName gerado e setado:\", userFullName);\r",
											"\r",
											"const fullName = pm.environment.get(\"FullName\");\r",
											"const corporateName = `${fullName} company`;\r",
											"pm.environment.set(\"corporateName\", corporateName);\r",
											"console.log(\"corporateName gerado:\", pm.environment.get(\"corporateName\"));\r",
											"\r",
											"const companyEmail = pm.environment.get(\"corporateName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@company.com.br';\r",
											"pm.environment.set(\"companyMail\", companyEmail);\r",
											"console.log(\"Email:\", companyEmail);\r",
											"\r",
											"\r",
											"function matrizName() {\r",
											"    const matrixNames = [ \r",
											"        \"Testes Automatizados\", \"Engenharia de Software\", \"Qualidade Digital\",\r",
											"        \"Desenvolvimento Ágil\", \"Inovação Tecnológica\", \"Sistemas Inteligentes\",\r",
											"        \"Análise de Dados\", \"Segurança Cibernética\", \"Nuvem Computing\",\r",
											"        \"Inteligência Artificial\", \"Aprendizado de Máquina\", \"Robótica Aplicada\",\r",
											"        \"Consultoria IT\", \"Soluções Integradas\", \"Plataformas Online\",\r",
											"        \"Design UX/UI\", \"Marketing Digital\", \"Fintech Solutions\",\r",
											"        \"E-commerce Dynamics\", \"Gestão de Projetos\"\r",
											"    ];\r",
											"     return matrixNames[Math.floor(Math.random() * matrixNames.length)];\r",
											"}\r",
											"pm.environment.set(\"MatrizName\", matrizName()); \r",
											"\r",
											"function serviceDescription() {\r",
											"    var serviceTerms = [\r",
											"        \"Consultoria\", \"Implementação\", \"Gerenciamento\", \"Suporte\",\r",
											"        \"Otimização\", \"Auditoria\", \"Análise\", \"Desenvolvimento Personalizado\",\r",
											"        \"Manutenção\", \"Monitoramento\"\r",
											"    ];\r",
											"    var randomServiceTerm = serviceTerms[Math.floor(Math.random() * serviceTerms.length)];\r",
											"    return randomServiceTerm; \r",
											"}\r",
											"pm.environment.set(\"ServiceDescription\", serviceDescription());\r",
											"\r",
											"const cidadesEstados = {\r",
											"    \"São Paulo\": \"SP\",\r",
											"    \"Rio de Janeiro\": \"RJ\",\r",
											"    \"Belo Horizonte\": \"MG\",\r",
											"    \"Porto Alegre\": \"RS\",\r",
											"    \"Salvador\": \"BA\",\r",
											"    \"Curitiba\": \"PR\",\r",
											"    \"Fortaleza\": \"CE\",\r",
											"    \"Recife\": \"PE\",\r",
											"    \"Brasília\": \"DF\",\r",
											"    \"Manaus\": \"AM\",\r",
											"    \"Goiânia\": \"GO\",\r",
											"    \"Florianópolis\": \"SC\",\r",
											"    \"Vitória\": \"ES\",\r",
											"    \"Natal\": \"RN\",\r",
											"    \"João Pessoa\": \"PB\",\r",
											"    \"Campinas\": \"SP\",\r",
											"    \"Uberlândia\": \"MG\",\r",
											"    \"Cuiabá\": \"MT\",\r",
											"    \"Campo Grande\": \"MS\",\r",
											"    \"Belém\": \"PA\",\r",
											"    \"São Luís\": \"MA\",\r",
											"    \"Teresina\": \"PI\",\r",
											"    \"Maceió\": \"AL\",\r",
											"    \"Aracaju\": \"SE\",\r",
											"    \"Palmas\": \"TO\",\r",
											"    \"Boa Vista\": \"RR\",\r",
											"    \"Macapá\": \"AP\",\r",
											"    \"Porto Velho\": \"RO\",\r",
											"    \"Rio Branco\": \"AC\",\r",
											"    \"Foz do Iguaçu\": \"PR\",\r",
											"    \"Niterói\": \"RJ\",\r",
											"    \"Contagem\": \"MG\",\r",
											"    \"Jundiaí\": \"SP\",\r",
											"    \"Ribeirão Preto\": \"SP\",\r",
											"    \"São José dos Campos\": \"SP\"\r",
											"};\r",
											"\r",
											"function randomCnpj() {\r",
											"    let cnpj = '';\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        cnpj += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"    return cnpj;\r",
											"}\r",
											"const companyCnpj = randomCnpj();\r",
											"pm.environment.set(\"CNPJ\", companyCnpj);\r",
											"\r",
											"const todasAsCidades = Object.keys(cidadesEstados);\r",
											"const aleatorio = Math.floor(Math.random() * todasAsCidades.length);\r",
											"const cidadeSelecionada = todasAsCidades[aleatorio];\r",
											"const estadoCorrespondente = cidadesEstados[cidadeSelecionada];\r",
											"pm.environment.set(\"city\", cidadeSelecionada);\r",
											"pm.environment.set(\"state\", estadoCorrespondente);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Mensagem de sucesso de atualização\", () => {\r",
											"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"Companhia atualizada com sucesso.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{companyMail}}\",\r\n  \"matriz\": \"{{MatrizName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"5561984384789\",\r\n  \"serviceDescription\": \"{{ServiceDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualização com sucesso (address)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 Created\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Mensagem de sucesso (atualização)\", () => {\r",
											"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"0000000010\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api-supernatural.qacoders.dev.br/api/company/address/{{companyId}}",
									"protocol": "https",
									"host": [
										"api-supernatural",
										"qacoders",
										"dev",
										"br"
									],
									"path": [
										"api",
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Validar zipCode com caracteres inválidos",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Erro de validação\", () => {\r",
									"       pm.expect(pm.response.json().error).to.be.an('array');\r",
									"    pm.expect(pm.response.json().error).to.include(\"O campo 'CEP' deve conter 8 dígitos\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777-00A\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"0000000010\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api-supernatural.qacoders.dev.br/api/company/address/{{companyId}}",
							"protocol": "https",
							"host": [
								"api-supernatural",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"company",
								"address",
								"{{companyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar zipCode com menos de 8 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mensagem de sucesso (atualização)\", () => {\r",
									"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"atualizado com sucesso.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"0477700\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"0000000010\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api-supernatural.qacoders.dev.br/api/company/address/{{companyId}}",
							"protocol": "https",
							"host": [
								"api-supernatural",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"company",
								"address",
								"{{companyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar country contendo números",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mensagem de sucesso (atualização)\", () => {\r",
									"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"atualizado com sucesso.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"0000000010\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Bras1l\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api-supernatural.qacoders.dev.br/api/company/address/{{companyId}}",
							"protocol": "https",
							"host": [
								"api-supernatural",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"company",
								"address",
								"{{companyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar city com números",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mensagem de sucesso (atualização)\", () => {\r",
									"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"atualizado com sucesso.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo 123\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"0000000010\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api-supernatural.qacoders.dev.br/api/company/address/{{companyId}}",
							"protocol": "https",
							"host": [
								"api-supernatural",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"company",
								"address",
								"{{companyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Back - Validar state com número",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mensagem de sucesso (atualização)\", () => {\r",
									"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"atualizado com sucesso.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"1P\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"0000000010\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api-supernatural.qacoders.dev.br/api/company/address/{{companyId}}",
							"protocol": "https",
							"host": [
								"api-supernatural",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"company",
								"address",
								"{{companyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar district com símbolo não permitido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mensagem de sucesso (atualização)\", () => {\r",
									"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"atualizado com sucesso.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Jardim @Leste\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"0000000010\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api-supernatural.qacoders.dev.br/api/company/address/{{companyId}}",
							"protocol": "https",
							"host": [
								"api-supernatural",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"company",
								"address",
								"{{companyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar street com símbolo não permitido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mensagem de sucesso (atualização)\", () => {\r",
									"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"atualizado com sucesso.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Rua dos #Anjos\",\r\n      \"number\": \"0000000010\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api-supernatural.qacoders.dev.br/api/company/address/{{companyId}}",
							"protocol": "https",
							"host": [
								"api-supernatural",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"company",
								"address",
								"{{companyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar number com letras",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mensagem de sucesso (atualização)\", () => {\r",
									"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"atualizado com sucesso.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"000000012A\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api-supernatural.qacoders.dev.br/api/company/address/{{companyId}}",
							"protocol": "https",
							"host": [
								"api-supernatural",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"company",
								"address",
								"{{companyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar country com símbolo inválido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mensagem de sucesso (atualização)\", () => {\r",
									"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"atualizado com sucesso.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"0000000010\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Br@sil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api-supernatural.qacoders.dev.br/api/company/address/{{companyId}}",
							"protocol": "https",
							"host": [
								"api-supernatural",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"company",
								"address",
								"{{companyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Máscara do campo CEP não reconhece o hífen e  Status HTTP incorreto em PUT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mensagem de sucesso (atualização)\", () => {\r",
									"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"atualizado com sucesso.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777-001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"0000000010\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api-supernatural.qacoders.dev.br/api/company/address/{{companyId}}",
							"protocol": "https",
							"host": [
								"api-supernatural",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"company",
								"address",
								"{{companyId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Buscar Centro de Custo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () =>  {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}costCenter",
					"host": [
						"{{url}}costCenter"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buscar Status Centro de Custo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () =>  {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"status\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}costCenter/status/68785639187166b1f45f5743",
					"host": [
						"{{url}}costCenter"
					],
					"path": [
						"status",
						"68785639187166b1f45f5743"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buscar Diretorias",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () =>  {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}board",
					"host": [
						"{{url}}board"
					]
				}
			},
			"response": []
		},
		{
			"name": "Criação de Diretoria",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () =>  {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"boardName\": \"Testes do Martins\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api-shogun.qacoders.dev.br/api/board",
					"protocol": "https",
					"host": [
						"api-shogun",
						"qacoders",
						"dev",
						"br"
					],
					"path": [
						"api",
						"board"
					]
				}
			},
			"response": []
		},
		{
			"name": "Criação do Centro de Custos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () =>  {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"costCenterName\": \"Centro de Custo Mais dois do Martins\",\r\n  \"boardId\": \"68ae1ba7cec232b1ccc7f6e1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api-shogun.qacoders.dev.br/api/costCenter",
					"protocol": "https",
					"host": [
						"api-shogun",
						"qacoders",
						"dev",
						"br"
					],
					"path": [
						"api",
						"costCenter"
					]
				}
			},
			"response": []
		},
		{
			"name": "GitHub",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () =>  {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AUTH_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/user",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{tokenAdmin}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}